CREATE TABLE budgets
  ( b_id             INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , amount           NUMBER(19, 4) NOT NULL
  , b_date           DATE NOT NULL
  , comments         VARCHAR2(255)
  , b_cat            INTEGER NOT NULL
  );

CREATE TABLE budget_categories
  ( b_cat_id        INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , b_cat_name      VARCHAR2(30) NOT NULL UNIQUE
  );

CREATE TABLE income_categories
  ( inc_cat_id      INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , inc_cat_name    VARCHAR2(100) NOT NULL UNIQUE
  );

CREATE TABLE expense_categories
  ( exp_cat_id      INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , exp_name        VARCHAR2(100) NOT NULL
  , budget          INTEGER NOT NULL
  , account         INTEGER NOT NULL
  , CONSTRAINT exp_cat_uq UNIQUE (exp_name, budget, account)
  );

CREATE TABLE accounts
  ( acc_id          INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , acc_name        VARCHAR2(30) NOT NULL UNIQUE
  , acc_type        INTEGER NOT NULL
  , currency        CHAR(3) NOT NULL
  , opened          DATE NOT NULL
  , closed          DATE
  );

CREATE TABLE account_balances
  ( acc_bal_id      INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , acc_bal_date    DATE NOT NULL
  , amount          NUMBER(19, 4) NOT NULL
  , account         INTEGER NOT NULL
  );

CREATE TABLE incomes
  ( inc_id          INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , amount          NUMBER(19, 4) NOT NULL
  , inc_date        DATE NOT NULL
  , comments        VARCHAR2(255)
  , income_category INTEGER NOT NULL
  , account         INTEGER NOT NULL
  );

CREATE TABLE account_types
  ( acc_type_id     INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , acc_type_name   VARCHAR2(50) NOT NULL UNIQUE
  );

CREATE TABLE expenses
  ( exp_id          INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY
  , amount          NUMBER(19, 4) NOT NULL
                      CONSTRAINT check_exp_amount CHECK (amount > 0)
  , exp_date        DATE NOT NULL
  , comments        VARCHAR2(255)
  , exp_cat         INTEGER NOT NULL
  );
